#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 10 16:25:01 2020
@author: lennart

Updates the dimension tables for Bundesliga rounds (e.g. Spieltag 15) and fixtures (e.g. Schalke 04 vs. Eintracht Frankfurt)
    
"""

import sys
sys.path.insert(1, '../secrets/')
from sm_api_connection import sportmonks_token

sys.path.insert(2, '../py/')
from logging_function import log, log_headline
from dataprep_functions import isNone

import requests
import pandas as pd 
from datetime import datetime
import pytz
import time
from time import gmtime, strftime
from sqlalchemy import create_engine
import sys

###############################
#   METAINFOS FROM MYSQL DB   #
###############################

log_headline('(1/3) GET META-DATA FROM MYSQL DB')
log('Connecting to MySQL database')

# connect to MySQL-database
from mysql_db_connection import db_user, db_pass, db_port, db_name
engine = create_engine('mysql+mysqlconnector://'+db_user+':'+db_pass+'@localhost:'+db_port+'/'+db_name, echo=False)  

with engine.connect() as con:
    log("Selecting spieltag from table parameter")
    sql_select = con.execute('SELECT spieltag FROM parameter')
    sql_first_row = sql_select.fetchone()
    aktueller_fantasy_spieltag =  sql_first_row['spieltag']

    log("Selecting current season_id from table parameter")
    sql_select = con.execute('SELECT season_id FROM parameter')
    sql_first_row = sql_select.fetchone()
    aktuelle_buli_season =  sql_first_row['season_id']
  
"""
# uncomment for testing
aktueller_fantasy_spieltag = 34
aktuelle_buli_season = 19744
"""

log("Current round-name in fantasy-game: " + str(aktueller_fantasy_spieltag))
log("Current season-id in fantasy-game: " + str(aktuelle_buli_season))

################################
#   DEFINING ROUNDS TO QUERY   #
################################

log_headline('(2/4) DEFINING ROUNDS TO QUERY')

# setup list containing round for which fixtures should be queried
spieltage_mit_stats = []

# check if script is executed from A) command line or by B) cronjob
log('Script is executed from command line: ' + str(sys.stdin.isatty()))

# A) executed from command line
if sys.stdin.isatty() is True:  
    log('List of round-names will be generated through user input')
    
    # collect user input 
    log("Enter start round-name (1-34):")
    user_input_start = input()
    log("Enter end round-name (1-34):")
    user_input_end = input()
    
    # select user input from list of possible values
    possible_rounds = []
    possible_rounds.extend(range(1, 35))
    
    if int(user_input_start) in possible_rounds and int(user_input_end) in possible_rounds and int(user_input_start) <= int(user_input_end):
        spieltage_mit_stats = []
        spieltage_mit_stats.extend(range(int(user_input_start), int(user_input_end)+1))
        log('List of round-names to query: ' + str(spieltage_mit_stats))

    else:
        sys.exit("Invalid user input - Exiting script")
        
# B) executed from cronjob
elif sys.stdin.isatty() is False:
    log('List of round-names will be generated by system')
    
    # set current round-name as default value
    spieltage_mit_stats.append(aktueller_fantasy_spieltag)
    log('List of round-names to query: ' + str(spieltage_mit_stats))

####################
#   GET FIXTURES   #
####################

log_headline('(3/4) GET FIXTURE DATA')
log("Sending query to rounds endpoint incl. fixtures")

response = requests.get(
    "https://api.sportmonks.com/v3/football/rounds/seasons/"
    + str(aktuelle_buli_season)
    + "?api_token=" + sportmonks_token
    + "&include=fixtures.state;fixtures.participants; fixtures.scores"
    )

log("API response code: " + str(response.status_code))
log("Processing rounds data")

response_round = response.json()
data_round = response_round['data']

fixture_data = []
cnt_processed_rounds = 1

# iterate through rounds
for spieltag in data_round:
    
    # check if round matches input and thereforeshould be updated    
    if int(spieltag['name']) in spieltage_mit_stats:
        print('')
        
        # if positive: Loop through fixtures of the round
        log('Processing round ' + str(cnt_processed_rounds) + '/' + str(len(spieltage_mit_stats)) + ' - round-name: ' + str(spieltag['name']))

        for matchup in spieltag['fixtures']:
            log('.. Parsing fixture ' + matchup['name'])

            fixture_list = []
            
            # identifiers for season, round and fixture
            fixture_list.append(matchup['season_id'])
            fixture_list.append(matchup['round_id'])
            fixture_list.append(int(spieltag['name']))
            fixture_list.append(matchup['id'])
            
            # start date + end date
            fixture_list.append(isNone(datetime.fromtimestamp(matchup['starting_at_timestamp'],pytz.timezone("Europe/Berlin")).date(),None))
            fixture_list.append(isNone(datetime.fromtimestamp(matchup['starting_at_timestamp'],pytz.timezone("Europe/Berlin")).strftime('%Y-%m-%d %H:%M:%S'),None))
            
            # state_id
            fixture_list.append(matchup['state']['short_name'])
            
            # teams
            home_team_id = 0
            away_team_id = 0
                
            for team in matchup['participants']:

                if team['meta']['location'] == 'home':
                    home_team_id = team['id']
                elif team['meta']['location'] == 'away':
                    away_team_id = team['id']
            
            fixture_list.append(home_team_id)
            fixture_list.append(away_team_id)
            
            # scores
            for score in matchup['scores']:
                if score['type_id'] == 1525 and score['score']['participant'] == 'home':
                    home_score = score['score']['goals']
                if score['type_id'] == 1525 and score['score']['participant'] == 'away':
                    away_score = score['score']['goals']
            
            fixture_list.append(isNone(home_score, None))
            fixture_list.append(isNone(away_score, None))
            
            # league_id and season_id
            fixture_list.append(matchup['league_id'])
            fixture_list.append(matchup['stage_id'])
            
            # add data to list
            fixture_data.append(fixture_list)
            
        cnt_processed_rounds = cnt_processed_rounds + 1
 
# safe results to DataFrame

# set column names
columns_names_fixtures = []
columns_names_fixtures += ['season_id','round_id','round_name', 'fixture_id','kickoff_dt','kickoff_ts','fixture_status','localteam_id',
                           'visitorteam_id','localteam_score','visitorteam_score','league_id','stage_id']

# Create dataframe
print('')
log('Building DataFrame from parsed fixtures')

df_fixtures = pd.DataFrame(columns=columns_names_fixtures, data=fixture_data)
log('Created DataFrame containing ' + str(df_fixtures.shape[0]) + ' fixtures')

##########################
#   WRITE INTO DATABASE  #
##########################

log_headline('(4/4) WRITE INTO DATABASE')
log('Connecting to MySQL database')     

# connect to MySQL-database
from mysql_db_connection import db_user, db_pass, db_port, db_name
engine = create_engine('mysql+mysqlconnector://'+db_user+':'+db_pass+'@localhost:'+db_port+'/'+db_name, echo=False)  

# create table if not exists
try:
    df_fixtures.to_sql(name='sm_fixtures', con=engine, index=False, if_exists='fail')
    with engine.connect() as con:
        con.execute('ALTER TABLE `sm_fixtures` ADD PRIMARY KEY (`fixture_id`);')
    db_message = 'Table sm_fixtures created'

# if exists update table through temp table
except:
    df_fixtures.to_sql(name='tmp_sm_fixtures', con=engine, index=False, if_exists='replace')
    with engine.connect() as con:
        con.execute('ALTER TABLE `tmp_sm_fixtures` ADD PRIMARY KEY (`fixture_id`);')   
        con.execute('''
                    INSERT INTO sm_fixtures 
                    SELECT  t2.season_id
                            , t2.round_id
                            , t2.round_name
                            , t2.fixture_id
                            , t2.kickoff_dt
                            , t2.kickoff_ts
                            , t2.fixture_status
                            , t2.localteam_id
                            , t2.visitorteam_id
                            , t2.localteam_score
                            , t2.visitorteam_score
                            , t2.league_id
                            , t2.stage_id
                            , null as kickoff_time
                            , null as ft_score
                            , null as ht_score
                            , sysdate() as update_ts
                            , sysdate() as insert_ts
                            
                    FROM tmp_sm_fixtures t2 
                    ON DUPLICATE KEY UPDATE 
                            kickoff_dt = t2.kickoff_dt
                            , kickoff_ts = t2.kickoff_ts
                            , fixture_status = t2.fixture_status
                            , localteam_id = t2.localteam_id
                            , visitorteam_id = t2.visitorteam_id
                            , localteam_score = t2.localteam_score
                            , visitorteam_score = t2.visitorteam_score
                            , update_ts = sysdate()
                    ;
                    ''')  
        con.execute('DROP TABLE tmp_sm_fixtures;')    

    db_message = "Table sm_fixtures updated"

finally:
    con.close()
  
log(db_message)
print('')